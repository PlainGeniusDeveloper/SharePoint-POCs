<script>
  // STEP 1: Get List ID from List Title
  async function getListIdByTitle(listTitle) {
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;
    const url = `${siteUrl}/_api/web/lists/getbytitle('${listTitle}')?$select=Id`;

    const response = await fetch(url, {
      headers: {
        'Accept': 'application/json;odata=verbose'
      }
    });

    if (!response.ok) {
      throw new Error("Failed to get list ID");
    }

    const data = await response.json();
    return data.d.Id;
  }

  // STEP 2: Get Workflow Instances for the Item
  async function getWorkflowInstancesForItem(listId, itemId) {
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;
    const url = `${siteUrl}/_api/SP.WorkflowServices.WorkflowInstanceService.Current/EnumerateInstancesForListItem`;

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Accept': 'application/json;odata=verbose',
        'Content-Type': 'application/json;odata=verbose',
        'X-RequestDigest': document.getElementById("__REQUESTDIGEST").value
      },
      body: JSON.stringify({
        listId: listId,
        itemId: itemId
      })
    });

    if (!response.ok) {
      throw new Error("Failed to get workflow instances");
    }

    const data = await response.json();
    return data.d.WorkflowInstances.results;
  }

  // STEP 3: Terminate Faulted/Suspended Workflow
  async function terminateWorkflowInstance(instanceId, listId, itemId) {
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;
    const url = `${siteUrl}/_api/SP.WorkflowServices.WorkflowInstanceService.Current/TerminateWorkflow`;

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Accept': 'application/json;odata=verbose',
        'Content-Type': 'application/json;odata=verbose',
        'X-RequestDigest': document.getElementById("__REQUESTDIGEST").value
      },
      body: JSON.stringify({
        workflowInstanceId: instanceId,
        listId: listId,
        itemId: itemId
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to terminate workflow instance: ${instanceId}`);
    }

    console.log(`Terminated workflow instance: ${instanceId}`);
  }

  // STEP 4: Clean up all Faulted/Suspended Workflows
  async function cleanUpWorkflowErrors(listId, itemId) {
    const instances = await getWorkflowInstancesForItem(listId, itemId);

    for (let instance of instances) {
      const status = instance.Status;
      if (status === "Faulted" || status === "Suspended") {
        await terminateWorkflowInstance(instance.Id, listId, itemId);
      }
    }
  }

  // STEP 5: Update the List Item
  async function updateListItem(listTitle, itemId, updatePayload) {
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;
    const itemUrl = `${siteUrl}/_api/web/lists/getbytitle('${listTitle}')/items(${itemId})`;

    const response = await fetch(itemUrl, {
      method: 'POST',
      headers: {
        'Accept': 'application/json;odata=verbose',
        'Content-Type': 'application/json;odata=verbose',
        'X-RequestDigest': document.getElementById("__REQUESTDIGEST").value,
        'IF-MATCH': '*',
        'X-HTTP-Method': 'MERGE'
      },
      body: JSON.stringify(updatePayload)
    });

    if (!response.ok) {
      throw new Error("Failed to update the item.");
    }

    console.log("Item updated successfully");
  }

  // FINAL MAIN FUNCTION (Call This One)
  async function updateItemWithWorkflowCheck(listTitle, itemId, updatePayload) {
    try {
      const listId = await getListIdByTitle(listTitle);
      await cleanUpWorkflowErrors(listId, itemId);
      await updateListItem(listTitle, itemId, updatePayload);
      alert("Item updated successfully!");
    } catch (err) {
      console.error("Update failed:", err);
      alert("Something went wrong:\n\n" + err.message);
    }
  }

  // âœ… USAGE EXAMPLE
  // updateItemWithWorkflowCheck("My Tasks", 12, { Title: "New Value from Code" });

</script>
