To execute a custom function after handling all results returned by a promise or an operation, you can leverage Promise.all in combination with .then. Here's how you can ensure that a custom function is executed after all operations for the results are completed:

Updated Code

// Step 3: Run All Operations and Handle Both Scenarios
Promise.all([fetchProductJson, fetchDefaultJson])
    .then(([result, defaultJson]) => {
        if (result.type === "content-type") {
            // Merge product JSON with default JSON
            const mergedItems = mergeJSON(defaultJson, result.data);
            bind_banner_details(mergedItems);
        } else if (result.type === "support-cards") {
            const supportInfoHtml = contentTypeHandlers["SupportCards"](result.data);
            $("#divSupportSlider").append(supportInfoHtml);
        }

        return result; // Return the processed result for further use
    })
    .then(() => {
        // Custom function to execute after handling all results
        runCustomFunction();
    })
    .catch((error) => {
        console.error("Error handling promises:", error);
    });

// Custom Function
function runCustomFunction() {
    console.log("All processing is done. Running custom function...");
    // Your custom logic here
}

Explanation

1. Promise.all:

It waits for all promises in the array (fetchProductJson and fetchDefaultJson) to resolve before proceeding to .then.



2. First .then Block:

Handles individual results (result and defaultJson) and processes them accordingly. For example:

Merges JSONs.

Binds data to a banner.

Appends content to a slider.




3. Second .then Block:

Executes the custom function runCustomFunction() after all the data processing for the results is complete.



4. Error Handling:

The .catch block ensures that errors in any promise or processing step are logged.




Key Benefits

Ensures runCustomFunction is executed only after all promises are resolved and data processing is completed.

Avoids race conditions or incomplete executions.


This approach will ensure your custom function runs only after all operations for the results are fully processed.
