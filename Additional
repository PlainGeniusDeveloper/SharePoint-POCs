Here's how you can create a new promise specifically for the publishListDetails.AreaOfSupport === listTitle condition. We will extract that logic into a separate promise and integrate it with the existing Promise.allSettled workflow.


---

Updated Code with an Additional Promise:

function previewdataBind(listTitle, paramContentOffering, paramVersion) {
  var listName = listTitle;

  // Step 1: Define Promises

  // Promise for fetching Product JSON
  const fetchProductJson = new Promise((resolve, reject) => {
    getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
      if (publishListDetails.ProductDetails === listTitle || baseListDetails.ProductDetails === listTitle) {
        const items = JSON.parse(data.d.results[0].JSON_x0020_Template);
        resolve({ type: "content-type", data: items, source: "fetchProductJson" });
      } else {
        reject("Unsupported list title for ProductDetails!");
      }
    });
  });

  // Promise for fetching Area of Support data
  const fetchAreaOfSupport = new Promise((resolve, reject) => {
    getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
      if (publishListDetails.AreaOfSupport === listTitle || baseListDetails.AreaOfSupport === listTitle) {
        const items = data.d.results;
        if (items.length > 0) {
          resolve({ type: "support-cards", data: items, source: "fetchAreaOfSupport" });
        } else {
          reject("Area of Support data not found!");
        }
      } else {
        reject("Unsupported list title for AreaOfSupport!");
      }
    });
  });

  // Promise for fetching Default JSON
  const fetchDefaultJson = new Promise((resolve, reject) => {
    const defaultJsonUrl = siteUrl + "/Style Library/Json/product.txt";
    $.get(defaultJsonUrl, function (defaultJsonText) {
      try {
        const defaultJson = JSON.parse(defaultJsonText);
        resolve({ data: defaultJson, source: "fetchDefaultJson" });
      } catch (error) {
        reject("Failed to parse default JSON");
      }
    }).fail(function (error) {
      reject(error);
    });
  });

  // Step 2: Use Promise.allSettled
  Promise.allSettled([fetchProductJson, fetchAreaOfSupport, fetchDefaultJson]).then((results) => {
    let resolvedCount = 0;

    results.forEach((result) => {
      if (result.status === "fulfilled") {
        resolvedCount++;
        console.log(`Resolved Promise from: ${result.value.source}`);
        if (result.value.type === "content-type") {
          console.log("Content type process");
          bindBannerDetails(result.value.data); // Handle content type data
        } else if (result.value.type === "support-cards") {
          console.log("Support cards process");
          $("#divSupportSlider").append(contentTypeHandlers["SupportCards"](result.value.data));
        }
      } else {
        console.error(`Rejected Promise: ${result.reason}`);
      }
    });

    console.log(`Total Promises Resolved: ${resolvedCount}`);
    console.log("All promises settled.");
    if (resolvedCount === results.length) {
      console.log("All promises resolved successfully!");
      afterAllCompleted(); // Run your custom function
    }
  });
}


---

Explanation of the New Promise:

1. fetchAreaOfSupport:

This promise handles the logic specific to publishListDetails.AreaOfSupport === listTitle.

Resolves with the support-cards data when the condition is met and items exist.

Rejects if:

The listTitle doesn't match the expected value.

No items are found for AreaOfSupport.




2. Promise.allSettled:

It now handles all three promises: fetchProductJson, fetchAreaOfSupport, and fetchDefaultJson.

Logs the resolved or rejected state for each promise.



3. Custom Handling:

Added source property to each promise's resolution to indicate its origin.

This makes debugging and tracking easier.





---

Output Example:

Case: All Promises Resolve

Resolved Promise from: fetchProductJson
Content type process
Resolved Promise from: fetchAreaOfSupport
Support cards process
Resolved Promise from: fetchDefaultJson
Total Promises Resolved: 3
All promises settled.
All promises resolved successfully!

Case: One Promise Fails

Resolved Promise from: fetchProductJson
Content type process
Rejected Promise: Area of Support data not found!
Resolved Promise from: fetchDefaultJson
Total Promises Resolved: 2
All promises settled.


---

This ensures that each condition is handled separately, making the code modular, testable, and easier to debug.
