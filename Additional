If other promises are showing undefined, it's likely because they aren't resolving properly with the expected structure. The issue might be with how the promise's resolve function is being called or with the data being passed.

Letâ€™s debug step by step and update the code to ensure all promises resolve with the correct data structure.

Updated Code

function previewdataBind(listTitle, paramContentOffering, paramVersion) {
  var listName = listTitle;

  // Promise for fetching Product JSON
  const fetchProductJson = new Promise((resolve, reject) => {
    getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
      if (publishListDetails.ProductDetails === listTitle || baseListDetails.ProductDetails === listTitle) {
        try {
          const items = JSON.parse(data.d.results[0].JSON_x0020_Template);
          resolve({ type: "content-type", data: items, source: "fetchProductJson" });
        } catch (error) {
          reject("Error parsing ProductDetails JSON");
        }
      } else {
        reject("Unsupported list title for ProductDetails!");
      }
    });
  });

  // Promise for fetching Area of Support data
  const fetchAreaOfSupport = new Promise((resolve, reject) => {
    getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
      if (publishListDetails.AreaOfSupport === listTitle || baseListDetails.AreaOfSupport === listTitle) {
        const items = data.d.results;
        if (items && items.length > 0) {
          resolve({ type: "support-cards", data: items, source: "fetchAreaOfSupport" });
        } else {
          reject("Area of Support data not found!");
        }
      } else {
        reject("Unsupported list title for AreaOfSupport!");
      }
    });
  });

  // Promise for fetching Default JSON
  const fetchDefaultJson = new Promise((resolve, reject) => {
    const defaultJsonUrl = siteUrl + "/Style Library/Json/product.txt";
    $.get(defaultJsonUrl, function (defaultJsonText) {
      try {
        const defaultJson = JSON.parse(defaultJsonText);
        resolve({ data: defaultJson, source: "fetchDefaultJson" });
      } catch (error) {
        reject("Failed to parse default JSON");
      }
    }).fail(function (error) {
      reject(error);
    });
  });

  // Step 2: Use Promise.allSettled
  Promise.allSettled([fetchProductJson, fetchAreaOfSupport, fetchDefaultJson]).then((results) => {
    let resolvedCount = 0;

    results.forEach((result) => {
      if (result.status === "fulfilled") {
        resolvedCount++;
        console.log(`Resolved Promise from: ${result.value.source}`);
        if (result.value.type === "content-type") {
          console.log("Content type process");
          bindBannerDetails(result.value.data); // Handle content type data
        } else if (result.value.type === "support-cards") {
          console.log("Support cards process");
          $("#divSupportSlider").append(contentTypeHandlers["SupportCards"](result.value.data));
        } else {
          console.log(`Default JSON loaded from: ${result.value.source}`);
        }
      } else {
        console.error(`Rejected Promise: ${result.reason}`);
      }
    });

    console.log(`Total Promises Resolved: ${resolvedCount}`);
    console.log("All promises settled.");
    if (resolvedCount === results.length) {
      console.log("All promises resolved successfully!");
      afterAllCompleted(); // Run your custom function
    }
  });
}


---

Key Fixes:

1. Added Safety Checks:

Ensure data.d.results exists before trying to access it.

Ensure parsed JSON and array items are valid before resolving the promise.



2. Debugging Promise Data:

Logged the result.value.source to identify which promise's data is resolved.

Added proper error handling with clear reject messages for debugging.



3. Default JSON Handling:

Ensure fetchDefaultJson resolves with the correct structure.





---

Debugging Steps:

1. Confirm Inputs:

Verify the listTitle, paramContentOffering, and paramVersion values being passed.

Make sure the backend API (getListItems) returns expected data.



2. Check API Response:

Log data in both fetchProductJson and fetchAreaOfSupport to confirm the structure:

console.log("API Response:", data);



3. Verify JSON Structure:

Ensure JSON_x0020_Template exists in data.d.results[0] for fetchProductJson.

Confirm data.d.results exists and has items for fetchAreaOfSupport.





---

Example Outputs:

Success:

Resolved Promise from: fetchProductJson
Content type process
Resolved Promise from: fetchAreaOfSupport
Support cards process
Resolved Promise from: fetchDefaultJson
Default JSON loaded from: fetchDefaultJson
Total Promises Resolved: 3
All promises settled.
All promises resolved successfully!

Failure:

Resolved Promise from: fetchProductJson
Content type process
Rejected Promise: Area of Support data not found!
Resolved Promise from: fetchDefaultJson
Default JSON loaded from: fetchDefaultJson
Total Promises Resolved: 2
All promises settled.

