function mergeJSON(defaultJson, specificJson) {
    let mergedJson = Array.isArray(defaultJson) ? [] : {}; // Maintain structure

    for (const key in defaultJson) {
        if (!specificJson.hasOwnProperty(key)) {
            // Add missing keys in the order of defaultJson
            mergedJson[key] = defaultJson[key];
        } else if (typeof defaultJson[key] === "object" && !Array.isArray(defaultJson[key]) && defaultJson[key] !== null) {
            // Ensure nested objects are merged and keep order
            mergedJson[key] = mergeJSON(defaultJson[key], specificJson[key] || {});
        } else if (Array.isArray(defaultJson[key])) {
            // Ensure the array exists in specificJson
            mergedJson[key] = [];
            const specificArray = Array.isArray(specificJson[key]) ? specificJson[key] : [];

            for (let i = 0; i < defaultJson[key].length; i++) {
                const defaultItem = defaultJson[key][i];

                if (typeof defaultItem === "object") {
                    // Find matching object by a unique key (e.g., tabName)
                    let found = specificArray.find(item => item.tabName === defaultItem.tabName);
                    mergedJson[key].push(found ? mergeJSON(defaultItem, found) : defaultItem);
                } else {
                    // Keep primitive values in order
                    mergedJson[key].push(specificArray.includes(defaultItem) ? defaultItem : defaultItem);
                }
            }
        } else {
            // Primitive values, keep specificJson value
            mergedJson[key] = specificJson[key];
        }
    }
    return mergedJson;
}
