To ensure that the promise for a specific listTitle block is created only if the block condition is met, we can reorganize the code to dynamically create promises based on the listTitle input. Here's the updated implementation:

Updated Code

function previewdataBind(listTitle, paramContentOffering, paramVersion) {
  var listName = listTitle;

  // Array to hold dynamically created promises
  const promises = [];

  // Create a promise for ProductDetails only if the listTitle matches ProductDetails
  if (publishListDetails.ProductDetails === listTitle || baseListDetails.ProductDetails === listTitle) {
    const fetchProductJson = new Promise((resolve, reject) => {
      getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
        try {
          const items = JSON.parse(data.d.results[0].JSON_x0020_Template);
          resolve({ type: "content-type", data: items, source: "fetchProductJson" });
        } catch (error) {
          reject("Error parsing ProductDetails JSON");
        }
      });
    });
    promises.push(fetchProductJson);
  }

  // Create a promise for AreaOfSupport only if the listTitle matches AreaOfSupport
  if (publishListDetails.AreaOfSupport === listTitle || baseListDetails.AreaOfSupport === listTitle) {
    const fetchAreaOfSupport = new Promise((resolve, reject) => {
      getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
        const items = data.d.results;
        if (items && items.length > 0) {
          resolve({ type: "support-cards", data: items, source: "fetchAreaOfSupport" });
        } else {
          reject("Area of Support data not found!");
        }
      });
    });
    promises.push(fetchAreaOfSupport);
  }

  // Always create a promise for Default JSON
  const fetchDefaultJson = new Promise((resolve, reject) => {
    const defaultJsonUrl = siteUrl + "/Style Library/Json/product.txt";
    $.get(defaultJsonUrl, function (defaultJsonText) {
      try {
        const defaultJson = JSON.parse(defaultJsonText);
        resolve({ data: defaultJson, source: "fetchDefaultJson" });
      } catch (error) {
        reject("Failed to parse default JSON");
      }
    }).fail(function (error) {
      reject(error);
    });
  });
  promises.push(fetchDefaultJson);

  // Step 2: Use Promise.allSettled to handle the promises
  Promise.allSettled(promises).then((results) => {
    let resolvedCount = 0;

    results.forEach((result) => {
      if (result.status === "fulfilled") {
        resolvedCount++;
        console.log(`Resolved Promise from: ${result.value.source}`);
        if (result.value.type === "content-type") {
          console.log("Content type process");
          bindBannerDetails(result.value.data); // Handle content type data
        } else if (result.value.type === "support-cards") {
          console.log("Support cards process");
          $("#divSupportSlider").append(contentTypeHandlers["SupportCards"](result.value.data));
        } else {
          console.log(`Default JSON loaded from: ${result.value.source}`);
        }
      } else {
        console.error(`Rejected Promise: ${result.reason}`);
      }
    });

    console.log(`Total Promises Resolved: ${resolvedCount}`);
    console.log("All promises settled.");
    if (resolvedCount === results.length) {
      console.log("All promises resolved successfully!");
      afterAllCompleted(); // Run your custom function
    }
  });
}


---

Key Changes:

1. Dynamic Promise Creation:

Promises are only created for fetchProductJson and fetchAreaOfSupport if their respective listTitle condition is satisfied.

fetchDefaultJson is always added to the promises array.



2. Simplified Logic:

The Promise.allSettled block remains the same, processing all created promises dynamically.



3. Ensure Order:

The order of promises in the promises array reflects the order in which conditions are checked.





---

Debugging Steps:

1. Test with different listTitle values and verify that only relevant promises are created.


2. Log the promises array before calling Promise.allSettled to confirm its contents:

console.log("Promises created:", promises);




---

Example Outputs:

Case 1: listTitle matches ProductDetails

Resolved Promise from: fetchProductJson
Content type process
Resolved Promise from: fetchDefaultJson
Default JSON loaded from: fetchDefaultJson
Total Promises Resolved: 2
All promises settled.
All promises resolved successfully!

Case 2: listTitle matches AreaOfSupport

Resolved Promise from: fetchAreaOfSupport
Support cards process
Resolved Promise from: fetchDefaultJson
Default JSON loaded from: fetchDefaultJson
Total Promises Resolved: 2
All promises settled.
All promises resolved successfully!

