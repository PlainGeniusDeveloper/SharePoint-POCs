I see the issue now:

Your Keywords array, e.g., "Keywords": [DEMO], is likely being overwritten as an empty array ([]) during the merge. This happens because mergeJSON currently initializes arrays (mergedJson[key] = []) before merging, but it doesn’t handle arrays properly when merging non-object values like strings or numbers inside them.


---

Fix: Properly Merge Arrays

We need to preserve existing values in specificJson arrays while ensuring defaultJson arrays provide missing values.

Updated Array Handling in mergeJSON

Modify the array handling section like this:

} else if (Array.isArray(defaultJson[key])) {
    // Preserve order and merge non-empty specificJson array values
    mergedJson[key] = Array.isArray(specificJson[key]) ? [...specificJson[key]] : [];

    for (let i = 0; i < defaultJson[key].length; i++) {
        const defaultItem = defaultJson[key][i];

        if (typeof defaultItem === "object") {
            // Find matching object in specificJson based on a unique identifier (like tabName)
            let found = mergedJson[key].find(item => item.tabName === defaultItem.tabName);
            mergedJson[key][i] = found ? mergeJSON(defaultItem, found) : defaultItem;
        } else {
            // Avoid overwriting existing array elements
            if (!mergedJson[key].includes(defaultItem)) {
                mergedJson[key].push(defaultItem);
            }
        }
    }
}


---

How This Fix Works

✅ Retains existing specificJson array values.
✅ Prevents replacing non-empty arrays with empty ones.
✅ Keeps array elements from both defaultJson and specificJson.
✅ Ensures objects inside arrays are merged recursively.


---

Test Case

const defaultJson = {
    Keywords: ["DEMO", "TEST"]
};

const specificJson = {
    Keywords: ["CUSTOM"]
};

const mergedJson = mergeJSON(defaultJson, specificJson);
console.log(JSON.stringify(mergedJson, null, 2));

Expected Output

{
  "Keywords": ["CUSTOM", "DEMO", "TEST"]
}

Let me know if this works for your case!
