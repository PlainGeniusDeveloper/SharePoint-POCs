function mergeJSON(defaultJson, specificJson) {
  function deepMerge(defaultObj, specificObj) {
    const result = {};

    for (const key in defaultObj) {
      if (Object.prototype.hasOwnProperty.call(defaultObj, key)) {
        const defaultVal = defaultObj[key];
        const specificVal = specificObj?.[key];

        if (specificVal !== undefined && specificVal !== null && specificVal !== "") {
          if (typeof defaultVal === "object" && !Array.isArray(defaultVal) && typeof specificVal === "object") {
            result[key] = deepMerge(defaultVal, specificVal);
          } else {
            result[key] = specificVal; // specific has valid value
          }
        } else {
          result[key] = defaultVal; // take default if missing or empty
        }
      }
    }

    // Add keys present in specific but not in default
    for (const key in specificObj) {
      if (!(key in result)) {
        result[key] = specificObj[key];
      }
    }

    return result;
  }

  return deepMerge(defaultJson, specificJson || {});
}
