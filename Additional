If the .then() block after your loop is still being executed prematurely, the issue might be that Promise.all resolves before the asynchronous operations within the loop are complete. This can happen if the asynchronous operations are not properly awaited or the loop isn't correctly designed to handle asynchronous behavior.

To ensure everything is handled properly, convert the Promise.all and processing logic into a fully async/await flow. Here's the updated code:

Fully Async Approach

(async function executeAllOperations() {
  try {
    // Step 3: Run All Operations and Handle Both Scenarios
    const [productResult, defaultResult] = await Promise.all([fetchProductJson, fetchDefaultJson]);

    // Wrap the processing in an async function
    const results = [
      { result: productResult, defaultJson: defaultResult }
    ];

    // Use a for...of loop to await each result processing
    for (const { result, defaultJson } of results) {
      await processResult(result, defaultJson); // Ensure each result is fully processed
    }

    // After all results are processed
    console.log("Started custom code");
    afterAllCompleted();

  } catch (error) {
    // Handle errors
    console.error("Error processing results:", error);
  }
})();

// Process result as an async function
async function processResult(result, defaultJson) {
  if (result.type === "content-type") {
    // Merge product JSON with default JSON
    const mergedItems = mergeJSON(defaultJson, result.data);
    bindBannerDetails(mergedItems);
  } else if (result.type === "support-cards") {
    const supportInfoHtml = contentTypeHandlers["SupportCards"](result.data);
    $("#divSupportSlider").append(supportInfoHtml);
  } else {
    console.warn("Unknown result type:", result.type);
  }
}

Key Adjustments:

1. Top-Level async Function:

We wrapped the entire operation in an async function (executeAllOperations), ensuring proper use of await.



2. await Inside Loop:

Each processResult call is awaited. This ensures that each result is fully processed before moving to the next.



3. No .then() for Processing:

By using async/await completely, there's no need to rely on .then() for sequencing.



4. Order Guaranteed:

The for...of loop guarantees sequential processing, and the await ensures no code in the then block runs until the loop finishes.




Why It Works:

The await keyword pauses execution of the executeAllOperations function until the asynchronous operation resolves.

This guarantees afterAllCompleted() only runs after all processResult calls have completed.

