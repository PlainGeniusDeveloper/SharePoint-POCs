Below is the updated implementation where each dropdown option has a checkbox and, when checked, an input field for a note appears next to the option.


---

Features:

1. Checkbox for each option: Allows users to select multiple options with checkboxes.


2. Note Input Field: A textbox appears next to each selected option for entering notes.


3. Save and Edit Functionality: Saves selected options and their notes, and allows editing later.




---

Example Code:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Select with Checkboxes and Notes</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .dropdown-container {
            margin-bottom: 20px;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .dropdown-item input[type="text"] {
            margin-left: 10px;
            display: none; /* Hidden until checkbox is checked */
        }

        .save-edit-buttons button {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <h2>Multi-Select with Checkboxes and Notes</h2>
    <form id="cascadingForm">
        <div class="dropdown-container" id="dropdownContainer">
            <!-- Dynamic checkboxes and notes will be added here -->
        </div>

        <!-- Save and Edit Buttons -->
        <div class="save-edit-buttons">
            <button type="button" id="saveButton">Save</button>
            <button type="button" id="editButton" style="display: none;">Edit</button>
        </div>
    </form>

    <script>
        $(document).ready(function () {
            // Mock data for Regions and Countries
            const data = {
                regions: [
                    { id: 1, name: "North America" },
                    { id: 2, name: "Europe" },
                    { id: 3, name: "Asia" }
                ],
                countries: [
                    { id: 101, name: "USA", regionId: 1 },
                    { id: 102, name: "Canada", regionId: 1 },
                    { id: 201, name: "Germany", regionId: 2 },
                    { id: 202, name: "France", regionId: 2 },
                    { id: 301, name: "India", regionId: 3 },
                    { id: 302, name: "China", regionId: 3 }
                ]
            };

            const $dropdownContainer = $("#dropdownContainer");
            let savedSelections = { selectedItems: [], notes: {} };

            // Populate checkboxes with regions and countries
            function populateDropdown() {
                $dropdownContainer.empty();

                data.regions.forEach(region => {
                    // Add region label
                    const $regionLabel = $("<strong>")
                        .text(region.name)
                        .css("display", "block")
                        .css("margin-top", "10px");
                    $dropdownContainer.append($regionLabel);

                    // Add countries under the region
                    data.countries
                        .filter(country => country.regionId === region.id)
                        .forEach(country => {
                            const $dropdownItem = $("<div>").addClass("dropdown-item");

                            const $checkbox = $("<input>")
                                .attr("type", "checkbox")
                                .attr("id", `country-${country.id}`)
                                .attr("data-country-id", country.id)
                                .attr("data-country-name", country.name);

                            const $label = $("<label>")
                                .attr("for", `country-${country.id}`)
                                .text(country.name);

                            const $input = $("<input>")
                                .attr("type", "text")
                                .attr("placeholder", `Note for ${country.name}`)
                                .attr("data-country-id", country.id);

                            // Append checkbox, label, and input to the dropdown item
                            $dropdownItem.append($checkbox, $label, $input);
                            $dropdownContainer.append($dropdownItem);

                            // Show/hide input on checkbox toggle
                            $checkbox.change(function () {
                                $input.toggle(this.checked);
                            });
                        });
                });
            }

            // Save selections and notes
            $("#saveButton").click(function () {
                savedSelections.selectedItems = [];
                savedSelections.notes = {};

                // Loop through all checkboxes and collect selections
                $dropdownContainer.find("input[type='checkbox']").each(function () {
                    const isChecked = $(this).is(":checked");
                    const countryId = $(this).data("country-id");

                    if (isChecked) {
                        savedSelections.selectedItems.push(countryId);
                        const note = $(`input[type="text"][data-country-id="${countryId}"]`).val();
                        savedSelections.notes[countryId] = note || "";
                    }
                });

                alert("Selections and notes saved!");
                console.log(savedSelections);

                // Hide save and show edit
                $("#saveButton").hide();
                $("#editButton").show();

                // Disable checkboxes and inputs
                $dropdownContainer.find("input").prop("disabled", true);
            });

            // Edit selections and notes
            $("#editButton").click(function () {
                // Enable checkboxes and inputs
                $dropdownContainer.find("input").prop("disabled", false);

                // Show save button again
                $("#saveButton").show();
                $("#editButton").hide();
            });

            // Initial load
            populateDropdown();

            // If saved selections exist, populate them
            if (savedSelections.selectedItems.length > 0) {
                savedSelections.selectedItems.forEach(countryId => {
                    $(`#country-${countryId}`).prop("checked", true).trigger("change");
                    $(`input[type="text"][data-country-id="${countryId}"]`).val(
                        savedSelections.notes[countryId] || ""
                    );
                });
            }
        });
    </script>
</body>
</html>


---

How It Works:

1

