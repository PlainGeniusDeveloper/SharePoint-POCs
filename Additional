Promise.all([fetchProductJson, fetchDefaultJson])
    .then(([productResult, defaultJson]) => {
        // Assuming productResult is an array of results
        return processAllResults(productResult, defaultJson);
    })
    .then(() => {
        console.log("Started custom code");
        afterAllCompleted(); // Call your custom function here
    })
    .catch((error) => {
        console.error("Error handling promises:", error);
    });

// Async function to process all results
async function processAllResults(results, defaultJson) {
    for (const result of results) {
        // Await the processing of each result
        await processResult(result, defaultJson);
    }
    return Promise.resolve(); // Ensure this function is async
}

// Async function to process a single result
async function processResult(result, defaultJson) {
    if (result.type === "content-type") {
        const mergedItems = mergeJSON(defaultJson, result.data);
        await bind_banner_details(mergedItems); // Await async operation
    } else if (result.type === "support-cards") {
        const supportInfoHtml = contentTypeHandlers["SupportCards"](result.data);
        $("#divSupportSlider").append(supportInfoHtml);
    } else {
        console.warn("Unhandled result type:", result.type);
    }
}
