function previewDataBind(listTitle, paramContentOffering, paramVersion) {
    const defaultJsonUrl = "/sites/SiteName/Style Library/json/default.txt";

    // Step 1: Fetch Product-Specific JSON
    const fetchProductJson = new Promise((resolve, reject) => {
        getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
            if (
                publishListDetails.ProductDetails === listTitle ||
                baseListDetails.ProductDetails === listTitle
            ) {
                const items = JSON.parse(data.d.results[0].JSON_x0020_Template);
                resolve({ type: "product", data: items }); // Resolve with product-specific JSON
            } else if (
                publishListDetails.AreaOfSupport === listTitle ||
                baseListDetails.AreaOfSupport === listTitle
            ) {
                const items = data.d.results;
                if (items.length > 0) {
                    resolve({ type: "support", data: items }); // Resolve with support-specific data
                } else {
                    reject("Area of Support data not found!");
                }
            } else {
                reject("Unsupported list title!");
            }
        });
    });

    // Step 2: Fetch Default JSON (only for ProductDetails)
    const fetchDefaultJson = new Promise((resolve, reject) => {
        $.get(defaultJsonUrl, function (defaultJsonText) {
            try {
                const defaultJson = JSON.parse(defaultJsonText);
                resolve(defaultJson); // Resolve with default JSON
            } catch (error) {
                reject("Failed to parse default JSON");
            }
        }).fail(function (error) {
            reject(error); // Handle fetch error
        });
    });

    // Step 3: Run All Operations and Handle Both Scenarios
    fetchProductJson
        .then((result) => {
            if (result.type === "product") {
                // For ProductDetails, merge with default JSON
                fetchDefaultJson
                    .then((defaultJson) => {
                        const mergedItems = mergeJSON(defaultJson, result.data);
                        bind_banner_details(mergedItems);
                        afterAllCompleted();
                    })
                    .catch((error) => {
                        console.error("Error loading default JSON:", error);
                    });
            } else if (result.type === "support") {
                // For AreaOfSupport, directly bind the data
                const supportInfoHtml = contentTypeHandlers["SupportCards"](result.data);
                $("#divSupportSlider").append(supportInfoHtml);
                afterAllCompleted();
            }
        })
        .catch((error) => {
            console.error("Error:", error);
        });

    // Recursive function to merge JSON objects
    function mergeJSON(defaultJson, specificJson) {
        for (const key in defaultJson) {
            if (!specificJson.hasOwnProperty(key)) {
                specificJson[key] = defaultJson[key];
            } else if (typeof defaultJson[key] === "object" && !Array.isArray(defaultJson[key])) {
                specificJson[key] = mergeJSON(defaultJson[key], specificJson[key]);
            }
        }
        return specificJson;
    }

    // Function to execute after everything is completed
    function afterAllCompleted() {
        console.log("All tasks completed!");
        // Add any post-processing or additional logic here
    }
}
