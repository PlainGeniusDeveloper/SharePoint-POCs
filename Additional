function previewDataBind(listTitle, paramContentOffering, paramVersion) {
    const defaultJsonUrl = "/sites/SiteName/Style Library/json/default.txt";

    // Step 1: Fetch Product-Specific JSON
    const fetchProductJson = new Promise((resolve, reject) => {
        getListItems(listTitle, paramContentOffering, paramVersion, function (data) {
            if (
                publishListDetails.ProductDetails === listTitle ||
                baseListDetails.ProductDetails === listTitle
            ) {
                const items = JSON.parse(data.d.results[0].JSON_x0020_Template);
                resolve({ type: "product", data: items });
            } else if (
                publishListDetails.AreaOfSupport === listTitle ||
                baseListDetails.AreaOfSupport === listTitle
            ) {
                const items = data.d.results;
                if (items.length > 0) {
                    resolve({ type: "support", data: items });
                } else {
                    reject("Area of Support data not found!");
                }
            } else {
                reject("Unsupported list title!");
            }
        });
    });

    // Step 2: Fetch Default JSON
    const fetchDefaultJson = new Promise((resolve, reject) => {
        $.get(defaultJsonUrl, function (defaultJsonText) {
            try {
                const defaultJson = JSON.parse(defaultJsonText);
                resolve(defaultJson);
            } catch (error) {
                reject("Failed to parse default JSON");
            }
        }).fail(function (error) {
            reject(error);
        });
    });

    // Step 3: Handle promises
    Promise.all([fetchProductJson, fetchDefaultJson])
        .then(([productResult, defaultJson]) => {
            if (productResult.type === "product") {
                // Merge product JSON with default JSON
                const mergedItems = mergeJSON(defaultJson, productResult.data);
                bind_banner_details(mergedItems);
            } else if (productResult.type === "support") {
                // Run the else block logic
                handleElseBlock(productResult.data);
            }
        })
        .catch((error) => {
            console.error("Error:", error);
        });

    // Recursive function to merge JSON objects
    function mergeJSON(defaultJson, specificJson) {
        for (const key in defaultJson) {
            if (!specificJson.hasOwnProperty(key)) {
                specificJson[key] = defaultJson[key];
            } else if (typeof defaultJson[key] === "object" && !Array.isArray(defaultJson[key])) {
                specificJson[key] = mergeJSON(defaultJson[key], specificJson[key]);
            }
        }
        return specificJson;
    }

    // Function for the "else" block logic
    function handleElseBlock(supportData) {
        waitForElement("#divSupportSlider", () => {
            const supportInfoHtml = contentTypeHandlers["SupportCards"](supportData);
            $("#divSupportSlider").append(supportInfoHtml);
            afterAllCompleted();
        });
    }

    // Function to execute after everything is completed
    function afterAllCompleted() {
        console.log("All tasks completed!");
    }

    // Function to wait for an element to be available in the DOM
    function waitForElement(selector, callback) {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if ($(selector).length > 0) {
                    observer.disconnect(); // Stop observing once the element is found
                    callback();
                }
            });
        });

        observer.observe(document.body, { childList: true, subtree: true });
    }
}
