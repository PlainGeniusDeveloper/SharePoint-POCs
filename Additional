Understood! The goal is to traverse the JSON object dynamically based on the given path, creating any missing objects along the way, and then setting the final value at the correct location.


---

Improved Recursive Function

This function: ✅ Traverses the given JSON structure dynamically
✅ Creates missing objects/arrays along the path
✅ Sets the value at the correct location

function setValueByPath(obj, path, value) {
    const keys = path.split('.'); // Split path into keys
    let current = obj;

    for (let i = 0; i < keys.length - 1; i++) {
        let key = keys[i];

        // If the current level is an array, find or create the object inside it
        if (Array.isArray(current)) {
            let foundObj = current.find(item => item.tabName === key);
            if (!foundObj) {
                foundObj = { tabName: key, tabContent: {} }; // Default structure
                current.push(foundObj);
            }
            current = foundObj;
            continue;
        }

        // If the key doesn't exist, create it as an object
        if (!current[key] || typeof current[key] !== 'object') {
            current[key] = {};
        }

        current = current[key]; // Move deeper
    }

    // Set the final value
    current[keys[keys.length - 1]] = value;
}

// Example JSON structure
let json_template_to_be_filled = [
    {
        "tabName": "Restrictions",
        "tabContent": {
            "titleName": "Restrictions",
            "tabAddOnTitleDescription": [],
            "description": ""
        }
    },
    {
        "tabName": "Support",
        "tabContent": {
            "titleName": "Support",
            "description": ""
        }
    }
];

// Path where value should be set
let jsonPath = "tabDetails.Support.tabContent.productArea";
let productArea = ["Product 1", "Product 2"];

setValueByPath(json_template_to_be_filled, jsonPath, productArea);

console.log(JSON.stringify(json_template_to_be_filled, null, 2));


---

What This Function Does

✔ Finds Support inside the array and updates its tabContent.productArea.
✔ If any part of the path is missing, it creates it dynamically.
✔ Works for deeply nested paths inside objects/arrays.


---

Expected Output

[
  {
    "tabName": "Restrictions",
    "tabContent": {
      "titleName": "Restrictions",
      "tabAddOnTitleDescription": [],
      "description": ""
    }
  },
  {
    "tabName": "Support",
    "tabContent": {
      "titleName": "Support",
      "description": "",
      "productArea": ["Product 1", "Product 2"]
    }
  }
]


---

Why This Works Well?

✅ Finds the path dynamically instead of hardcoding.
✅ Creates missing objects without breaking existing data.
✅ Handles nested arrays/objects properly.

Let me know if this perfectly meets your needs!
