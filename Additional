function mergeJSON(defaultJson, specificJson) {
  function deepMerge(defaultObj, specificObj) {
    const result = {};

    // Loop over all keys in default
    for (const key in defaultObj) {
      const defaultVal = defaultObj[key];
      const specificVal = specificObj?.[key];

      if (specificVal === undefined || specificVal === null || specificVal === "") {
        // Specific missing or empty → use default
        if (typeof defaultVal === "object" && defaultVal !== null) {
          // Deep clone default object
          result[key] = deepMerge(defaultVal, {});
        } else {
          result[key] = defaultVal;
        }
      } else {
        // Specific has value
        if (
          typeof defaultVal === "object" &&
          defaultVal !== null &&
          typeof specificVal === "object" &&
          !Array.isArray(defaultVal)
        ) {
          // Both objects → recursive merge
          result[key] = deepMerge(defaultVal, specificVal);
        } else {
          // Primitive or array → use specific
          result[key] = specificVal;
        }
      }
    }

    // Add any extra keys present in specific but not in default
    if (specificObj) {
      for (const key in specificObj) {
        if (!(key in result)) {
          result[key] = specificObj[key];
        }
      }
    }

    return result;
  }

  return deepMerge(defaultJson, specificJson || {});
}
