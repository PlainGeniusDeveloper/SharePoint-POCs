Yes, you can use a .txt file instead of a .json file to store your default JSON content. Hereâ€™s how you can do it:


---

Steps

1. Save Default JSON in a .txt File:

Create a file named default.txt and store your JSON content as plain text.

{
    "Product": {
        "name": "Default Product",
        "price": "100",
        "brand": "Generic",
        "features": {
            "warranty": "1 year"
        }
    }
}

Upload this file to your SharePoint library (e.g., Style Library).



2. Update the Code: Modify the code to fetch the .txt file and parse its content.




---

Updated Code

function previewDataBind(listTitle, paramContentOffering, paramVersion) {
    var listName = listTitle;

    getListItems(listName, paramContentOffering, paramVersion, function (data) {
        if (publishListDetails.ProductDetails === listName || baseListDetails.ProductDetails === listName) {
            var items = data.d.results[0].JSON_x0020_Template;
            items = JSON.parse(items);

            // Fetch default JSON from .txt file
            const defaultJsonUrl = "/sites/SiteName/Style Library/json/default.txt";
            $.get(defaultJsonUrl, function (defaultJsonText) {
                // Parse the text content into JSON
                const defaultJson = JSON.parse(defaultJsonText);

                // Merge default JSON with the specific JSON
                const mergedItems = mergeJSON(defaultJson, items);

                // Bind the merged result
                bind_banner_details(mergedItems);
            }).fail(function (error) {
                console.error("Error fetching default JSON:", error);
            });

            return;
        } else if (publishListDetails.AreaOfSupport === listName || baseListDetails.AreaOfSupport === listName) {
            var items = data.d.results;
            if (items.length > 0) {
                const supportInfoHtml = contentTypeHandlers["SupportCards"](items);
                $("#divSupportSlider").append(supportInfoHtml);
            }
            return;
        }
    });

    // Recursive function to merge JSON objects
    function mergeJSON(defaultJson, specificJson) {
        for (const key in defaultJson) {
            if (!specificJson.hasOwnProperty(key)) {
                // Add missing keys from the default JSON
                specificJson[key] = defaultJson[key];
            } else if (typeof defaultJson[key] === "object" && !Array.isArray(defaultJson[key])) {
                // Recursively merge nested objects
                specificJson[key] = mergeJSON(defaultJson[key], specificJson[key]);
            }
        }
        return specificJson;
    }
}


---

Key Changes

1. Using .txt File:

The default JSON is stored in a .txt file instead of .json.



2. Parsing .txt Content:

The content of the .txt file is retrieved as plain text and parsed into JSON using JSON.parse.





---

Testing

1. Upload default.txt to the desired SharePoint location.


2. Update the defaultJsonUrl variable with the correct path to your .txt file.


3. Test the application to ensure that the default values are correctly merged with product-specific JSON.



This approach avoids the .json file restriction while retaining the functionality. Let me know if you need further help!

