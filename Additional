// Step 3: Run All Operations and Handle Both Scenarios
Promise.all([fetchProductJson, fetchDefaultJson])
  .then(async ([productResult, defaultResult]) => {
    // Initialize an array to store the results of processResult
    const processTasks = [];

    // Iterate through results and process them
    const results = [
      { result: productResult, defaultJson: defaultResult }
    ];

    for (const { result, defaultJson } of results) {
      // Push the processResult promises to the array
      processTasks.push(processResult(result, defaultJson));
    }

    // Wait for all processResults to complete
    await Promise.all(processTasks);
  })
  .then(() => {
    // After all results are processed
    console.log("Started custom code");
    afterAllCompleted();
  })
  .catch((error) => {
    // Handle errors
    console.error("Error processing results:", error);
  });

// Process result as an async function
async function processResult(result, defaultJson) {
  if (result.type === "content-type") {
    // Merge product JSON with default JSON
    const mergedItems = mergeJSON(defaultJson, result.data);
    bindBannerDetails(mergedItems);
  } else if (result.type === "support-cards") {
    const supportInfoHtml = contentTypeHandlers["SupportCards"](result.data);
    $("#divSupportSlider").append(supportInfoHtml);
  } else {
    console.warn("Unknown result type:", result.type);
  }
}
