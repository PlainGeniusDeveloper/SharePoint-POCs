// Object to keep track of CKEditor instances
const editorInstances = {};

// Default editor configuration
const defaultConfig = {
    toolbar: {
        items: [
            'heading', '|', 'bold', 'italic', 'underline', '|',
            'link', 'imageUpload', 'mediaEmbed', 'blockQuote', '|',
            'bulletedList', 'numberedList', 'outdent', 'indent', '|',
            'undo', 'redo'
        ],
        shouldNotGroupWhenFull: false
    },
    height: 300 // Set default height
};

// Function to initialize CKEditor on a given selector with optional config
function initCKEditor(selector, config = {}) {
    // Merge the provided config with the default config
    const editorConfig = { ...defaultConfig, ...config };
    
    // Check if an editor instance already exists on this selector
    if (editorInstances[selector]) {
        // Destroy existing editor instance before reinitializing
        editorInstances[selector].destroy().then(() => {
            createEditorInstance(selector, editorConfig);
        });
    } else {
        // No existing instance, so create one directly
        createEditorInstance(selector, editorConfig);
    }
}

// Function to create and store an editor instance for a selector
function createEditorInstance(selector, config) {
    ClassicEditor
        .create(document.querySelector(selector), config)
        .then(editor => {
            // Store the editor instance in the object for future reference
            editorInstances[selector] = editor;
        })
        .catch(error => {
            console.error('Error creating the editor:', error);
        });
}

// Event listener to initialize editors when the button is clicked
document.querySelector('#initializeEditorsButton').addEventListener('click', () => {
    // Initialize CKEditor on each element with specific configurations
    initCKEditor('#new-editor'); // Default toolbar and settings
    initCKEditor('#title-editor', { toolbar: ['heading', 'bold', 'italic'] }); // Custom toolbar for title editor
});
